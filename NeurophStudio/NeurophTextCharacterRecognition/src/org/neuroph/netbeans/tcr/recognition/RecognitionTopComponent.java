/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.neuroph.netbeans.tcr.recognition;

import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import javax.imageio.ImageIO;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.modules.image.ImageDataObject;
import org.neuroph.core.NeuralNetwork;
import org.neuroph.imgrec.filter.ImageFilter;
import org.neuroph.imgrec.filter.ImageFilterChain;
import org.neuroph.imgrec.filter.impl.MeanFilter;
import org.neuroph.imgrec.filter.impl.MedianFilter;
import org.neuroph.netbeans.files.nnet.NeuralNetworkDataObject;
import org.neuroph.netbeans.tcr.top.settings.DisabledListSelectionModel;
import org.neuroph.netbeans.tcr.top.settings.FilterTableModel;
import org.neuroph.netbeans.tcr.top.settings.TextTableModel;
import org.neuroph.ocr.OCRTextRecognition;
import org.neuroph.ocr.util.Letter;
import org.neuroph.ocr.util.Text;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.filesystems.FileObject;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.neuroph.netbeans.tcr.recognition//Recognition//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "RecognitionTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.netbeans.tcr.recognition.RecognitionTopComponent")
// @ActionReference(path = "Menu/Window", position = 790)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_RecognitionAction",
        preferredID = "RecognitionTopComponent"
)
@Messages({
    "CTL_RecognitionAction=OCR - Recognition",
    "CTL_RecognitionTopComponent=OCR - Recognition",
    "HINT_RecognitionTopComponent=Recognize text using learned neural network."
})
public final class RecognitionTopComponent extends TopComponent implements LookupListener {

    private DefaultListModel selectedFiltersListModel;
    private List<ImageFilter> selectedFilters;
    private ImageFilterChain chain;

    private Stack<BufferedImage> stack;
    private FilterTableModel filterTableModel;

    private Lookup.Result<NeuralNetworkDataObject> result = null;
    private final InstanceContent content = new InstanceContent();
    private NeuralNetwork neuralNetwork;
    private String rootFolder;
    private File resultFile;

//    private String[] trainingTextFiles;
//    private List<String> imagesPaths;
//    private String imageFolderPath;
//    private String imagesDirPath;
//    private String documentsPath;
//    private List<String> imageList;
//    private TextTableModel textTableModel;
    public RecognitionTopComponent() {
        initComponents();
        setName(Bundle.CTL_RecognitionTopComponent());
        setToolTipText(Bundle.HINT_RecognitionTopComponent());

        arrangeTableFilters();
//        arangeTableText();
        arangeList();
        selectedFilters = new ArrayList<ImageFilter>();
        stack = new Stack<BufferedImage>();

//        imagesPaths = new ArrayList<String>();
//        imageList = new ArrayList<String>();
        chain = new ImageFilterChain();

        //LOOKUP
        associateLookup(new AbstractLookup(content));
        btnPreviewFilterActionPerformed(null);
//        addRightClickListener();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblFilters = new javax.swing.JTable();
        btnPreviewFilter = new javax.swing.JButton();
        btnUndoPreview = new javax.swing.JButton();
        btnAddFilter = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstSelectedFilters = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cmbScanQ = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        txtImage = new javax.swing.JTextField();
        btnFindImage = new javax.swing.JButton();
        btnRecognize = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        txtNnet = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        txtResult = new javax.swing.JTextField();
        btnSearchText = new javax.swing.JButton();

        tblFilters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(tblFilters);

        org.openide.awt.Mnemonics.setLocalizedText(btnPreviewFilter, org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.btnPreviewFilter.text")); // NOI18N
        btnPreviewFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviewFilterActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnUndoPreview, org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.btnUndoPreview.text")); // NOI18N
        btnUndoPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUndoPreviewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(btnUndoPreview)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPreviewFilter)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPreviewFilter)
                    .addComponent(btnUndoPreview))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(btnAddFilter, org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.btnAddFilter.text")); // NOI18N
        btnAddFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFilterActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnRemove, org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.btnRemove.text")); // NOI18N
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        lstSelectedFilters.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstSelectedFilters);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.jPanel2.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.jLabel2.text")); // NOI18N

        cmbScanQ.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "300 dpi", "600 dpi", "1200 dpi" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(cmbScanQ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbScanQ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.jPanel1.border.title"))); // NOI18N

        txtImage.setEditable(false);
        txtImage.setText(org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.txtImage.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnFindImage, org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.btnFindImage.text")); // NOI18N
        btnFindImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindImageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtImage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnFindImage, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindImage))
                .addContainerGap())
        );

        org.openide.awt.Mnemonics.setLocalizedText(btnRecognize, org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.btnRecognize.text")); // NOI18N
        btnRecognize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecognizeActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.jPanel3.border.title"))); // NOI18N

        txtNnet.setText(org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.txtNnet.text")); // NOI18N
        txtNnet.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtNnet)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(txtNnet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.jPanel4.border.title"))); // NOI18N

        txtResult.setText(org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.txtResult.text")); // NOI18N
        txtResult.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(btnSearchText, org.openide.util.NbBundle.getMessage(RecognitionTopComponent.class, "RecognitionTopComponent.btnSearchText.text")); // NOI18N
        btnSearchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchText))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAddFilter)
                                    .addComponent(btnRemove))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(btnRecognize, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(btnAddFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRecognize)
                .addGap(35, 35, 35))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPreviewFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviewFilterActionPerformed

        if (stack == null) {
            return;
        }
        int row = tblFilters.getSelectedRow();
        if (row == -1) {
            return;
        }

        ImageFilter filter = filterTableModel.getImageFilter(row);

        BufferedImage filtered = filter.processImage(stack.peek());
        putIntoLookup(filtered);

    }//GEN-LAST:event_btnPreviewFilterActionPerformed

    private void btnUndoPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUndoPreviewActionPerformed
        if (stack == null || stack.isEmpty()) {
            return;
        }
        putIntoLookup(stack.peek());
    }//GEN-LAST:event_btnUndoPreviewActionPerformed

    private void btnAddFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFilterActionPerformed
        int row = tblFilters.getSelectedRow();
        ImageFilter filter = filterTableModel.getImageFilter(row);
        addIntoSelected(filter);
    }//GEN-LAST:event_btnAddFilterActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        removeFromSelected();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnFindImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindImageActionPerformed
        BufferedImage image;
        try {
            String imagePath = getFilePathChooser();
            image = ImageIO.read(new File(imagePath));
            txtImage.setText(new File(imagePath).getName());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Image can not be loaded");
            return;
        }

        stack = new Stack<BufferedImage>();
        stack.push(image);
        putIntoLookup(image);


    }//GEN-LAST:event_btnFindImageActionPerformed

    private void btnRecognizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecognizeActionPerformed
        if (neuralNetwork == null) {
            JOptionPane.showMessageDialog(null, "You have to select neural network.");
            return;
        }
        if (stack.isEmpty()) {
            JOptionPane.showMessageDialog(null, "You have to find image for recognition.");
            return;
        }
        
        if ( resultFile == null) {
            JOptionPane.showMessageDialog(null, "You have to select destination folder where the result text will be stored.");
            return;
        }
        BufferedImage image = stack.peek();
        int scanQ = Integer.parseInt(((String) cmbScanQ.getSelectedItem()).split(" ")[0]);
        Letter letterInfo = new Letter(scanQ, image);
        Text textInfo = new Text(image, letterInfo);
        OCRTextRecognition recognition = new OCRTextRecognition(letterInfo, textInfo);
        recognition.setNeuralNetwork(neuralNetwork);
        recognition.recognize();

        

        String name = "text_" + (new Date()).toString() + ".txt";
        name = name.replace(" ", "-");
        name = name.replace(":", "-");
        String resultPath = resultFile.getPath() + File.separator + name;
        System.out.println(resultPath);
        recognition.setRecognizedTextPath(resultPath);
        recognition.saveText();

        JOptionPane.showMessageDialog(null, name + " is succesfully created.");


    }//GEN-LAST:event_btnRecognizeActionPerformed

    private void btnSearchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchTextActionPerformed

        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Choose directory:");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            resultFile = chooser.getSelectedFile();
            txtResult.setText(resultFile.getPath());
        }
        else {
            resultFile = null;
        }


    }//GEN-LAST:event_btnSearchTextActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFilter;
    private javax.swing.JButton btnFindImage;
    private javax.swing.JButton btnPreviewFilter;
    private javax.swing.JButton btnRecognize;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearchText;
    private javax.swing.JButton btnUndoPreview;
    private javax.swing.JComboBox cmbScanQ;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JList lstSelectedFilters;
    private javax.swing.JTable tblFilters;
    private javax.swing.JTextField txtImage;
    private javax.swing.JTextField txtNnet;
    private javax.swing.JTextField txtResult;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {

        result = Utilities.actionsGlobalContext().lookupResult(NeuralNetworkDataObject.class);
        result.addLookupListener(this);
        resultChanged(null);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
        result.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void addIntoSelected(ImageFilter imageFilter) {
        if (stack == null || stack.isEmpty()) {
            return;
        }

        BufferedImage filtrered = imageFilter.processImage(stack.peek());
        putIntoLookup(filtrered);
        stack.push(filtrered);

        selectedFilters.add(imageFilter);
        if (imageFilter instanceof MedianFilter) {
            MedianFilter mf = (MedianFilter) imageFilter;
            selectedFiltersListModel.addElement(mf.toString() + " (" + mf.getRadius() + ")");
            revalidate();
            return;
        }
        if (imageFilter instanceof MeanFilter) {
            MeanFilter mf = (MeanFilter) imageFilter;
            selectedFiltersListModel.addElement(mf.toString() + " (" + mf.getRadius() + ")");
            revalidate();
            return;
        }
        selectedFiltersListModel.addElement(imageFilter.toString());
        revalidate();
    }

    public void removeFromSelected() {
        if (selectedFilters.isEmpty() || stack == null || stack.isEmpty()) {
            return;
        }
        selectedFilters.remove(selectedFilters.size() - 1);
        selectedFiltersListModel.removeElement(selectedFiltersListModel.elementAt(selectedFiltersListModel.size() - 1));
        stack.pop();
        putIntoLookup(stack.peek());
        revalidate();
    }

    private void arrangeTableFilters() {
        filterTableModel = new FilterTableModel();
        tblFilters.setModel(filterTableModel);

        TableColumnModel tcm = tblFilters.getColumnModel();
        TableColumn tc_0 = tcm.getColumn(0);
        tc_0.setPreferredWidth(200);

        TableColumn tc_1 = tcm.getColumn(1);
        tc_1.setPreferredWidth(75);
        Integer[] values = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        tc_1.setCellEditor(new DefaultCellEditor(new JComboBox(values)));

    }

    private void putIntoLookup(BufferedImage image) {
        content.set(Collections.singleton(image), null);
    }

    private void arangeList() {
        selectedFiltersListModel = new DefaultListModel();
        selectedFiltersListModel.removeAllElements();
        lstSelectedFilters.setSelectionModel(new DisabledListSelectionModel());
        lstSelectedFilters.setModel(selectedFiltersListModel);
    }

    private String getFilePathChooser() {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Choose file:");
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            return chooser.getSelectedFile().getAbsolutePath();
        } else {
            return null;
        }
    }

    public void resultChanged(LookupEvent le) {
        Collection<? extends NeuralNetworkDataObject> allNetworks = result.allInstances();
        if (!allNetworks.isEmpty()) {
            NeuralNetworkDataObject nnetDO = allNetworks.iterator().next();

            neuralNetwork = nnetDO.getNeuralNetwork();
            txtNnet.setText(neuralNetwork.getLabel());

            Set<FileObject> files = nnetDO.files();
            FileObject file = files.iterator().next();
            FileObject rootFO = file.getParent().getParent();
            rootFolder = rootFO.getPath();

            /*
             Set<org.openide.filesystems.FileObject> files = imageDO.files();
             FileObject file = files.iterator().next();
             FileObject imagesFolder = file.getParent();
             imageFolderPath = imagesFolder.getPath();
           
            
            
            
             */
        }

    }
}
