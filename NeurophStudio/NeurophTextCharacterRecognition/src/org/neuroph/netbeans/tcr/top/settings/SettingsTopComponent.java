/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.neuroph.netbeans.tcr.top.settings;

import com.sun.javafx.scene.control.skin.VirtualFlow;
import java.awt.Button;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import javax.imageio.ImageIO;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.modules.image.ImageDataObject;
import org.neuroph.core.NeuralNetwork;
import org.neuroph.imgrec.filter.ImageFilter;
import org.neuroph.imgrec.filter.ImageFilterChain;
import org.neuroph.imgrec.filter.impl.AdaptiveThresholdBinarizeFilter;
import org.neuroph.imgrec.filter.impl.Dilation;
import org.neuroph.imgrec.filter.impl.GrayscaleFilter;
import org.neuroph.imgrec.filter.impl.MeanFilter;
import org.neuroph.imgrec.filter.impl.MedianFilter;
import org.neuroph.imgrec.filter.impl.NormalizationFilter;
import org.neuroph.imgrec.filter.impl.OtsuBinarizeFilter;
import org.neuroph.imgrec.filter.impl.ZhangSuenThinFilter;
import org.neuroph.ocr.OCRTraining;
import org.neuroph.ocr.util.Letter;
import org.neuroph.ocr.util.Text;

import org.openide.awt.ActionID;
import org.openide.filesystems.FileObject;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.neuroph.netbeans.tcr.top.properties//Properties//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SettingsTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.netbeans.tcr.top.properties.PropertiesTopComponent")
//@ActionReference(path = "Menu/Window", position = 789)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PropertiesAction",
        preferredID = "SettingsTopComponent"
)
@Messages({
    "CTL_PropertiesAction=OCR - Preparation",
    "CTL_PropertiesTopComponent=OCR - Preparation",
    "HINT_PropertiesTopComponent=Prepare images(characters) for training"
})
public final class SettingsTopComponent extends TopComponent implements LookupListener {

    private DefaultListModel selectedFiltersListModel;
    private List<ImageFilter> selectedFilters;
    private ImageFilterChain chain;

    private Stack<BufferedImage> stack;
    private FilterTableModel filterTableModel;

    private Lookup.Result<ImageDataObject> result = null;

    private String projectFolderPath;
    private String[] trainingTextFiles;
    private List<String> imagesPaths;
    private String imageFolderPath;

    private String imagesDirPath;
    private String documentsPath;

    private List<String> imageList;
    private TextTableModel textTableModel;

    public SettingsTopComponent() {
        initComponents();
        setName(Bundle.CTL_PropertiesTopComponent());
        setToolTipText(Bundle.HINT_PropertiesTopComponent());

        arrangeTableFilters();
        arangeList();
        selectedFilters = new ArrayList<ImageFilter>();

        imagesPaths = new ArrayList<String>();
        imageList = new ArrayList<String>();
        chain = new ImageFilterChain();

        //LOOKUP
        associateLookup(new AbstractLookup(content));
        btnPreviewFilterActionPerformed(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cmbScanQ = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblFilters = new javax.swing.JTable();
        btnPreviewFilter = new javax.swing.JButton();
        btnAddFilter = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstSelectedFilters = new javax.swing.JList();
        btnCreateImages = new javax.swing.JButton();
        btnUndoPreview = new javax.swing.JButton();
        pnlDescription = new javax.swing.JPanel();
        lbldescription = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(SettingsTopComponent.class, "SettingsTopComponent.jButton1.text")); // NOI18N

        setEnabled(false);
        setMinimumSize(new java.awt.Dimension(420, 0));
        setPreferredSize(new java.awt.Dimension(390, 718));

        jPanel5.setPreferredSize(new java.awt.Dimension(390, 500));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(SettingsTopComponent.class, "SettingsTopComponent.jPanel2.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SettingsTopComponent.class, "SettingsTopComponent.jLabel2.text")); // NOI18N

        cmbScanQ.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "300 dpi", "600 dpi", "1200 dpi" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(cmbScanQ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbScanQ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        tblFilters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblFilters.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFiltersMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblFilters);

        org.openide.awt.Mnemonics.setLocalizedText(btnPreviewFilter, org.openide.util.NbBundle.getMessage(SettingsTopComponent.class, "SettingsTopComponent.btnPreviewFilter.text")); // NOI18N
        btnPreviewFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviewFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(btnPreviewFilter)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPreviewFilter)
                .addGap(0, 13, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(btnAddFilter, org.openide.util.NbBundle.getMessage(SettingsTopComponent.class, "SettingsTopComponent.btnAddFilter.text")); // NOI18N
        btnAddFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFilterActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnRemove, org.openide.util.NbBundle.getMessage(SettingsTopComponent.class, "SettingsTopComponent.btnRemove.text")); // NOI18N
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        lstSelectedFilters.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstSelectedFilters);

        org.openide.awt.Mnemonics.setLocalizedText(btnCreateImages, org.openide.util.NbBundle.getMessage(SettingsTopComponent.class, "SettingsTopComponent.btnCreateImages.text")); // NOI18N
        btnCreateImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateImagesActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnUndoPreview, org.openide.util.NbBundle.getMessage(SettingsTopComponent.class, "SettingsTopComponent.btnUndoPreview.text")); // NOI18N
        btnUndoPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUndoPreviewActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lbldescription, org.openide.util.NbBundle.getMessage(SettingsTopComponent.class, "SettingsTopComponent.lbldescription.text")); // NOI18N

        javax.swing.GroupLayout pnlDescriptionLayout = new javax.swing.GroupLayout(pnlDescription);
        pnlDescription.setLayout(pnlDescriptionLayout);
        pnlDescriptionLayout.setHorizontalGroup(
            pnlDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDescriptionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbldescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlDescriptionLayout.setVerticalGroup(
            pnlDescriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDescriptionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbldescription, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlDescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnRemove)
                                    .addComponent(btnAddFilter))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnUndoPreview)))
                            .addComponent(btnCreateImages, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(btnAddFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUndoPreview)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCreateImages)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 212, Short.MAX_VALUE))
        );

        jScrollPane4.setViewportView(jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    //LOOKUP
    private final InstanceContent content = new InstanceContent();

    private void btnPreviewFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviewFilterActionPerformed

        if (stack == null) {
            return;
        }
        int row = tblFilters.getSelectedRow();
        if (row == -1) {
            return;
        }

        ImageFilter filter = filterTableModel.getImageFilter(row);

        BufferedImage filtered = filter.processImage(stack.peek());
        putIntoLookup(filtered);


    }//GEN-LAST:event_btnPreviewFilterActionPerformed

    private void btnUndoPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUndoPreviewActionPerformed
        if (stack == null || stack.isEmpty()) {
            return;
        }
        putIntoLookup(stack.peek());
    }//GEN-LAST:event_btnUndoPreviewActionPerformed

    private void btnAddFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFilterActionPerformed
        int row = tblFilters.getSelectedRow();
        ImageFilter filter = filterTableModel.getImageFilter(row);
        addIntoSelected(filter);
    }//GEN-LAST:event_btnAddFilterActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        removeFromSelected();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnCreateImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateImagesActionPerformed

     
        populateFilterChain();
        makeDirectorires();
        createDataSet();


    }//GEN-LAST:event_btnCreateImagesActionPerformed

    private void tblFiltersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFiltersMouseClicked
        
        
        int row = tblFilters.getSelectedRow();
        if (row == -1)
            return;
        String description = "";
        ImageFilter filter = filterTableModel.getImageFilter(row);
        if (filter instanceof GrayscaleFilter)
            description = "<html><b>Gray Scale Filter</b> converts RGB images to grayscaled. "
                    + "This filter should be first filter in the filter chain.</html>";
        else if (filter instanceof OtsuBinarizeFilter)
            description = "<html>This is binarization filter. <b>Otsu method</b> is used as binarization algorithm. "
                    + "Light pixels will be replaced with white ones, and dark with black ones.<br/>"
                    + "Threshold for this purpose is calculated using all pixels on the image. "
                    + "Image should be grayscaled before.</html>";
        else if (filter instanceof MedianFilter)
            description = "<html>Algorithm for the <b>Median Filter</b> is the following:<br/>"
                    + "Every pixel in the image is replaced with the median of surrounding pixels. Number of surrounding pixels "
                    + "is determined with the <b>radius</b> parameter. For example, if the radius is 4, "
                    + "then there is 16 pixels (4x4). Image should be grayscaled before.</html>";
        else if (filter instanceof  MeanFilter)
            description = "<html>Algorithm for the <b>Mean Filter</b> is the following:<br/>"
                    + "Every pixel in the image is replaced with the mean of surrounding pixels. Number of surrounding pixels "
                    + "is determined with the <b>radius</b> parameter. For example, if the radius is 4, "
                    + "then there is 16 pixels (4x4). Image should be grayscaled before.</html>";
        else if (filter instanceof AdaptiveThresholdBinarizeFilter)
            description = "<html>This is binarization filter. Light pixels will be replaced with white ones, "
                    + "and dark with black ones. Threshold for this replacment is calulated locally.</html>";
        else if (filter instanceof ZhangSuenThinFilter)
            description = "<html><b>Thinning Filter</b> is used if you font make characters thinner. Thickness of the characters "
                    + "in the resulting image is one pixel. Image should be binarized before this filter.</html>";
        else if (filter instanceof Dilation)
            description = "<html><b>Dilation</b> makes character thicker. Every pixel on the original image will be replaced with 9 "
                    + "pixels (3x3). Image should be binarized before.</html>";
        else if (filter instanceof NormalizationFilter)
            description = "<html><b>Normalization Filter</b> is good for handwriten characters. If a presure of a pencile is weaker,"
                    + "this filter should fix this, and this lighter pixel will be replaced with black one. Resul is binarized image,"
                    + "and original image should be binarized first.</html>";
        else
            description="";
        
        lbldescription.setText(description);
    }//GEN-LAST:event_tblFiltersMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFilter;
    private javax.swing.JButton btnCreateImages;
    private javax.swing.JButton btnPreviewFilter;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnUndoPreview;
    private javax.swing.JComboBox cmbScanQ;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lbldescription;
    private javax.swing.JList lstSelectedFilters;
    private javax.swing.JPanel pnlDescription;
    private javax.swing.JTable tblFilters;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening

        result = Utilities.actionsGlobalContext().lookupResult(ImageDataObject.class);
        result.addLookupListener(this);
        resultChanged(null);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
        result.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void addIntoSelected(ImageFilter imageFilter) {
        if (stack == null || stack.isEmpty()) {
            return;
        }

        BufferedImage filtrered = imageFilter.processImage(stack.peek());
        putIntoLookup(filtrered);
        stack.push(filtrered);

        selectedFilters.add(imageFilter);
        if (imageFilter instanceof MedianFilter) {
            MedianFilter mf = (MedianFilter) imageFilter;
            selectedFiltersListModel.addElement(mf.toString() + " (" + mf.getRadius() + ")");
            revalidate();
            return;
        }
        if (imageFilter instanceof MeanFilter) {
            MeanFilter mf = (MeanFilter) imageFilter;
            selectedFiltersListModel.addElement(mf.toString() + " (" + mf.getRadius() + ")");
            revalidate();
            return;
        }
        selectedFiltersListModel.addElement(imageFilter.toString());
        revalidate();
    }

    public void removeFromSelected() {
        if (selectedFilters.isEmpty() || stack == null || stack.isEmpty()) {
            return;
        }
        selectedFilters.remove(selectedFilters.size() - 1);
        selectedFiltersListModel.removeElement(selectedFiltersListModel.elementAt(selectedFiltersListModel.size() - 1));
        stack.pop();
        putIntoLookup(stack.peek());
        revalidate();
    }

    public void resultChanged(LookupEvent le) {
        Collection<? extends ImageDataObject> allImages = result.allInstances();
        if (!allImages.isEmpty()) {
            ImageDataObject imageDO = allImages.iterator().next();
            try {

                stack = new Stack<BufferedImage>();
                BufferedImage image = (BufferedImage) imageDO.getImage();
                stack.push(image);
                for (ImageFilter filter : selectedFilters) {
                    BufferedImage filtered = filter.processImage(stack.peek());
                    stack.push(filtered);
                }

                putIntoLookup(stack.peek());
                requestActive();
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }

//            DEO KODA ZA PRONALAZENJE FOLDERA
            Set<org.openide.filesystems.FileObject> files = imageDO.files();
            FileObject file = files.iterator().next();
            FileObject imagesFolder = file.getParent();
            imageFolderPath = imagesFolder.getPath();
            projectFolderPath = imagesFolder.getParent().getPath();

            FileObject[] imageFiles = imagesFolder.getChildren();

//            if (imageList.isEmpty()) {
//                for (FileObject imageFile : imageFiles) {
//                    if (!imageFile.isFolder()) {
//                        imageList.add(imageFile.getName());
//                        imagesPaths.add(imageFile.getPath());
//                    }
//                }
//                trainingTextFiles = new String[imageList.size()];
//                textTableModel.setImageList(imageList);
//            }
            //
            //Verovatno bespotrebna linija koda
//            FileObject[] subFolders = root.getChildren();
//            for (FileObject subFolder : subFolders) {
//                String probna = subFolder.getPath();
//                if (probna.equals(neuralNetworkFolder)) {
//                    neuralNetworks= new ArrayList<NeuralNetwork>();
//                    FileObject [] nnetsFO = subFolder.getChildren();
//                    for (FileObject nnetFO : nnetsFO) {
//                        String nnetPath = nnetFO.getPath();
//                        
//                        File nnetFile = new File(nnetPath);
//                        NeuralNetwork nnet = NeuralNetwork.createFromFile(nnetFile);
//                        neuralNetworks.add(nnet);
//                    }
//                    break;
//                }
//            }
            //============================================================
//            System.out.println("ROOT " + root);
//
//            System.out.println("");
//            System.out.println("");
//            FileObject[] children = root.getChildren();
//            for (FileObject child : children) {
//                System.out.println("CHILD " + child);
//                FileObject[] unuci = child.getChildren();
//                for (FileObject unuk : unuci) {
//                    System.out.println("    UNUK " + unuk);
//                }
//                System.out.println("");
//            }
        }
    }

    private void arrangeTableFilters() {
        filterTableModel = new FilterTableModel();
        tblFilters.setModel(filterTableModel);

        TableColumnModel tcm = tblFilters.getColumnModel();
        TableColumn tc_0 = tcm.getColumn(0);
        tc_0.setPreferredWidth(200);

        TableColumn tc_1 = tcm.getColumn(1);
        tc_1.setPreferredWidth(75);
        Integer[] values = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        tc_1.setCellEditor(new DefaultCellEditor(new JComboBox(values)));

    }

    private void putIntoLookup(BufferedImage image) {
        content.set(Collections.singleton(image), null);
    }

    private void arangeList() {
        selectedFiltersListModel = new DefaultListModel();
        selectedFiltersListModel.removeAllElements();
        lstSelectedFilters.setSelectionModel(new DisabledListSelectionModel());
        lstSelectedFilters.setModel(selectedFiltersListModel);
    }

    private void makeDirectorires() {
        File imagesDir = new File(imageFolderPath + File.separator + "ImagesDir");
        imagesDir.mkdir();
        imagesDirPath = imagesDir.getAbsolutePath();

        File documents = new File(imageFolderPath + File.separator + "Documents");
        documents.mkdir();
        documentsPath = documents.getAbsolutePath();

    }

    private void createDataSet() {
        try {

            File imagesFolder = new File(projectFolderPath+File.separator+"Images");
            for (File imageFile : imagesFolder.listFiles()) {
                if (imageFile.getName().toLowerCase().endsWith(".png")
                        || imageFile.getName().toLowerCase().endsWith(".jpg")) {

                    

                    BufferedImage image = ImageIO.read(imageFile);
                    imageFile.delete();

                    String documentFolder = projectFolderPath+File.separator+"Documents";
                    
                    String documentName = imageFile.getName().substring(0, imageFile.getName().length()-3)+"txt";
                    String textPath = documentFolder + File.separator+documentName;

                    if (textPath == null) {
                        continue;
                    }

                    BufferedImage binarizedImage = chain.processImage(image);
                    String scanQualityStr = (String) cmbScanQ.getSelectedItem();
                    int scanQuality = Integer.parseInt(scanQualityStr.split(" ")[0]);
                    Letter letterInfo = new Letter(scanQuality, binarizedImage);

                    Text textInfo = new Text(binarizedImage, letterInfo);
                    OCRTraining ocrTraining = new OCRTraining(letterInfo, textInfo);
                    ocrTraining.setFolderPath(imagesDirPath + File.separator);
                    ocrTraining.setTrainingTextPath(textPath);
                    ocrTraining.prepareTrainingSet();
                    
                    String imageName = imageFile.getName();
                    File outputfile = new File(documentsPath + File.separator + imageName);
                    ImageIO.write(image, "png", outputfile);
                }
            }
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }

    }

    private void populateFilterChain() {
        chain = new ImageFilterChain();
        for (ImageFilter filter : selectedFilters) {
            chain.addFilter(filter);
        }

    }

}
