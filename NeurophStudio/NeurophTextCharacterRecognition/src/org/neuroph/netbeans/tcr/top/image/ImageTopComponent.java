/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.neuroph.netbeans.tcr.top.image;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.ScrollPane;
import java.awt.image.BufferedImage;
import java.util.Collection;
import javafx.scene.control.ScrollBar;
import javax.swing.Icon;
import javax.swing.JScrollPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.neuroph.netbeans.tcr.top.image//Image//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ImageTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.netbeans.tcr.top.image.ImageTopComponent")
// @ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ImageAction",
        preferredID = "ImageTopComponent"
)
@Messages({
    "CTL_ImageAction=Image",
    "CTL_ImageTopComponent=Image Window",
    "HINT_ImageTopComponent=This is a Image window"
})
public final class ImageTopComponent extends TopComponent implements LookupListener {

    
//    private PnlImage pnlImage;
    private ImageArea imageArea ;
    
    public ImageTopComponent() {
        initComponents();
        setName(Bundle.CTL_ImageTopComponent());
        setToolTipText(Bundle.HINT_ImageTopComponent());
//        pnlImage = new PnlImage();
        
        imageArea = new ImageArea();
        JScrollPane scrollPane = new JScrollPane(imageArea);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        pnlCenter.add(scrollPane,BorderLayout.CENTER);
//        scrollPane.add(pnlImage);
//        scrollPane.setViewportView(pnlImage);
//        pnlWrapper.add(pnlImage,BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCenter = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        pnlCenter.setLayout(new java.awt.BorderLayout());
        add(pnlCenter, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlCenter;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(BufferedImage.class);
        result.addLookupListener(this);
        resultChanged(null);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    // LOOKUP PART
    private Lookup.Result<BufferedImage> result;

    public void resultChanged(LookupEvent le) {
        Collection<? extends BufferedImage> allImages = result.allInstances();
        if (!allImages.isEmpty()) {
            BufferedImage image = allImages.iterator().next();
//            pnlImage.setImage(image);
            imageArea.setImage(image);
            revalidate();
            repaint();
        }
    }

    
    
    
    
    
}
