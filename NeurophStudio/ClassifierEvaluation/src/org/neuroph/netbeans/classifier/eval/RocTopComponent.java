package org.neuroph.netbeans.classifier.eval;

import java.awt.BorderLayout;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.contrib.eval.ClassifierEvaluator;
import org.neuroph.contrib.eval.ErrorEvaluator;
import org.neuroph.contrib.eval.Evaluation;
import org.neuroph.contrib.eval.classification.ClassificationMetrics;
import org.neuroph.contrib.eval.classification.ConfusionMatrix;
import org.neuroph.core.NeuralNetwork;
import org.neuroph.core.Neuron;
import org.neuroph.core.learning.error.MeanSquaredError;
import org.neuroph.netbeans.visual.NeuralNetAndDataSet;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.neuroph.netbeans.classifier.eval//Roc//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "RocTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.netbeans.classifier.eval.RocTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_RocAction",
        preferredID = "RocTopComponent"
)
@Messages({
    "CTL_RocAction=Roc",
    "CTL_RocTopComponent=Roc Window",
    "HINT_RocTopComponent=This is a Roc window"
})
public final class RocTopComponent extends TopComponent {

    NeuralNetAndDataSet neuralNetAndDataSet;
    
    public RocTopComponent() {
        initComponents();
        setName(Bundle.CTL_RocTopComponent());
        setToolTipText(Bundle.HINT_RocTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
          JFreeChart  chart = createChart();
          ChartPanel chartPanel = new ChartPanel(chart);
          add(chartPanel, BorderLayout.CENTER);
          revalidate();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private JFreeChart createChart() {
        
        // first create dataset 
        final XYSeriesCollection plotDataset = new XYSeriesCollection();
        final XYSeries series = new XYSeries("ROC");
        
        // iterate classification threshold 0 - 1
        for(double threshold = 0; threshold <=1; threshold+=0.05) { 
            // for each threshold value salculate sensitivity and specificity 1-spec
            ClassificationMetrics metrics = calculateSensitivityAndSpecificity(threshold);
                       
            double x = 1 - metrics.getSpecificity() ;//metrics.getFalsePositiveRate(); // FPR
            if (Double.isNaN(x)) x= 0;
            double y =  metrics.getSensitivity(); // TPR
            series.add(x, y);
            System.out.println("X: "+x+" Y:"+y);
        }
        
        plotDataset.addSeries(series);
        
        final JFreeChart chart = ChartFactory.createXYLineChart(
            "ROC",
            "False Positive Rate", 
            "True Positive Rate", 
            plotDataset,
            PlotOrientation.VERTICAL,
            true,
            true,
            false
        );

        return chart;
    }

    void setNeuralNetworkAndDataSet(NeuralNetAndDataSet context) {
        this.neuralNetAndDataSet = context;
    }

    private ClassificationMetrics calculateSensitivityAndSpecificity(double threshold) {      
       NeuralNetwork<?> neuralNet = neuralNetAndDataSet.getNetwork();
       
       boolean isMultiClass = false;
   
       String[] classNames =  new String[neuralNet.getOutputsCount()]; // neuralNet.getOutputLabels()  
       int i = 0;
       
       for(Neuron n : neuralNet.getOutputNeurons()) {
           classNames[i] = n.getLabel(); 
           i++;
       } 

        if (neuralNet.getOutputNeurons().size() > 1) isMultiClass = true;
        
        Evaluation evaluation = new Evaluation();
        ClassifierEvaluator classifierEvaluator = null;
        
        if (isMultiClass) {            
            classifierEvaluator = new ClassifierEvaluator.MultiClass(classNames);
            // evaluator.setThreshold(threshold); does this works?          
        } else {        
            classifierEvaluator = new ClassifierEvaluator.Binary(threshold);            
        }

        evaluation.addEvaluator(classifierEvaluator);  
        evaluation.evaluateDataSet(neuralNetAndDataSet.getNetwork(), neuralNetAndDataSet.getDataSet());       
                                    
        ConfusionMatrix confusionMatrix = classifierEvaluator.getResult();  
        ClassificationMetrics[] metrics = ClassificationMetrics.createFromMatrix(confusionMatrix);         
        
        return metrics[0];
    }
    
    
    
}
