/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.neuroph.netbeans.lpr;

import static java.awt.Color.WHITE;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import net.sourceforge.javaocr.ocrPlugins.CharacterExtractor;
import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.core.NeuralNetwork;
import org.neuroph.core.data.DataSet;
import org.neuroph.core.data.DataSetRow;
import org.neuroph.imgrec.ColorMode;
import org.neuroph.imgrec.image.Dimension;
import org.neuroph.imgrec.image.Image;
import org.neuroph.imgrec.image.ImageFactory;
import org.neuroph.imgrec.image.ImageJ2SE;
import org.neuroph.ocr.OcrPlugin;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.IOProvider;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.neuroph.netbeans.lpr.wiz//Lpr//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "LprTopComponent",
        iconBase = "org/neuroph/netbeans/lpr/wiz/ikonica-crop.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.neuroph.netbeans.lpr.wiz.LprTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_LprAction",
        preferredID = "LprTopComponent"
)
@Messages({
    "CTL_LprAction=Licence Plate Recognition",
    "CTL_LprTopComponent=Licence Plate Recognition",
    "HINT_LprTopComponent=This is a licence plate recognition window"
})
public final class LprTopComponent extends TopComponent implements LookupListener {

    private static LprTopComponent instance;

    private JFileChooser testImageFileChooser;
    private NeuralNetwork selectedNeuralNetwork;
    private DataSet selectedTrainingSet;
    Lookup.Result<NeuralNetwork> neuralNetResultSets;
    Lookup.Result<DataSet> trainingSetNetResultSets;
    private String charOutputFile = "data";
    private String recognizedCharacters = "";
    private BufferedImage image;

    public LprTopComponent() {
        initComponents();
        setName(Bundle.CTL_LprTopComponent());
        setToolTipText(Bundle.HINT_LprTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        topPanel = new javax.swing.JPanel();
        testDataField = new javax.swing.JTextField();
        testingNetworkField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        centerPanel = new javax.swing.JPanel();
        testImageLabel = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        selectImageButton = new javax.swing.JButton();
        testAllButton = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        topPanel.setLayout(new java.awt.GridBagLayout());

        testDataField.setEditable(false);
        testDataField.setFont(new java.awt.Font("Ubuntu", 2, 15)); // NOI18N
        testDataField.setText(org.openide.util.NbBundle.getMessage(LprTopComponent.class, "LprTopComponent.testDataField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 191;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 8, 7, 0);
        topPanel.add(testDataField, gridBagConstraints);

        testingNetworkField.setEditable(false);
        testingNetworkField.setFont(new java.awt.Font("Ubuntu", 2, 15)); // NOI18N
        testingNetworkField.setText(org.openide.util.NbBundle.getMessage(LprTopComponent.class, "LprTopComponent.testingNetworkField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 195;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 12, 5, 0);
        topPanel.add(testingNetworkField, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(LprTopComponent.class, "LprTopComponent.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 18, 6, 21);
        topPanel.add(jLabel2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(LprTopComponent.class, "LprTopComponent.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 37;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(14, 0, 3, 0);
        topPanel.add(jLabel1, gridBagConstraints);

        add(topPanel, java.awt.BorderLayout.PAGE_START);

        centerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        centerPanel.setAutoscrolls(true);

        testImageLabel.setBackground(new java.awt.Color(255, 255, 255));
        testImageLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        centerPanel.add(testImageLabel);

        add(centerPanel, java.awt.BorderLayout.CENTER);

        org.openide.awt.Mnemonics.setLocalizedText(selectImageButton, org.openide.util.NbBundle.getMessage(LprTopComponent.class, "LprTopComponent.selectImageButton.text")); // NOI18N
        selectImageButton.setEnabled(false);
        selectImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectImageButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(selectImageButton);

        org.openide.awt.Mnemonics.setLocalizedText(testAllButton, org.openide.util.NbBundle.getMessage(LprTopComponent.class, "LprTopComponent.testAllButton.text")); // NOI18N
        testAllButton.setEnabled(false);
        testAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testAllButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(testAllButton);

        add(buttonPanel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void selectImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectImageButtonActionPerformed
        testImage();
    }//GEN-LAST:event_selectImageButtonActionPerformed

    private void testAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testAllButtonActionPerformed
        testWholeDataSet();
    }//GEN-LAST:event_testAllButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton selectImageButton;
    private javax.swing.JButton testAllButton;
    private javax.swing.JTextField testDataField;
    private javax.swing.JLabel testImageLabel;
    private javax.swing.JTextField testingNetworkField;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
 public static synchronized LprTopComponent getDefault() {
        if (instance == null) {
            instance = new LprTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the IMRTopComponent instance. Never call {@link #getDefault}
     * directly!
     */
    public static synchronized LprTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent("LprTopComponent");
        if (win == null) {
            Logger.getLogger(LprTopComponent.class.getName()).warning(
                    "Cannot find " + "LprTopComponent" + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof LprTopComponent) {
            return (LprTopComponent) win;
        }
        Logger.getLogger(LprTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + "LprTopComponent"
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Lookup.Result r = (Lookup.Result) le.getSource();
        Collection c = r.allInstances();
        if (!c.isEmpty()) {
            Object item = c.iterator().next();

            if (item instanceof NeuralNetwork) {
                selectedNeuralNetwork = (NeuralNetwork) item;
                testingNetworkField.setText(selectedNeuralNetwork.getLabel());
                selectImageButton.setEnabled(true);
            } else if (item instanceof DataSet) {
                selectedTrainingSet = (DataSet) item;
                testDataField.setText(selectedTrainingSet.getLabel());
                testAllButton.setEnabled(true);
            }
        }
    }

    @Override
    public void componentOpened() {
        neuralNetResultSets = WindowManager.getDefault().findTopComponent("projectTabLogical_tc").getLookup().lookupResult(NeuralNetwork.class);
        neuralNetResultSets.addLookupListener(this);

        trainingSetNetResultSets = WindowManager.getDefault().findTopComponent("projectTabLogical_tc").getLookup().lookupResult(DataSet.class);
        trainingSetNetResultSets.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        neuralNetResultSets.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void testWholeDataSet() {
        Iterator<DataSetRow> iterator = selectedTrainingSet.iterator();
        StringBuilder sb = new StringBuilder();
        while (iterator.hasNext()) {
            DataSetRow trainingElement = iterator.next();
            selectedNeuralNetwork.setInput(trainingElement.getInput());
            selectedNeuralNetwork.calculate();
            double[] networkOutput = selectedNeuralNetwork.getOutput();
            sb.append(arrayToString(networkOutput) + "\r\n");
        }
        IOProvider.getDefault().getIO("Image Recognition Test", false).getOut().println(sb.toString());

    }

    public void testImage() {
        if (testImageFileChooser == null) {
            testImageFileChooser = new JFileChooser();
            testImageFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            testImageFileChooser.setFileFilter(new FileFilter() {
                @Override
                public boolean accept(File f) {
                    if (f.isDirectory()) {
                        return true;
                    }
                    String name = f.getName();
                    if (name.endsWith(".png") || name.endsWith(".PNG")
                            || name.endsWith(".jpg") || name.endsWith(".JPG")) {
                        return true;
                    }
                    return false;
                }

                @Override
                public String getDescription() {
                    // TODO Auto-generated method stub
                    return null;
                }
            });
        }

        int returnVal = testImageFileChooser.showDialog(null, "Select Image");
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            // ovde uzmi fajl i prikazi rezultat testa
            File imgFile = testImageFileChooser.getSelectedFile();

            Image img = ImageFactory.getImage(imgFile);
            //scale image here
            testImageLabel.setIcon(new ImageIcon(((ImageJ2SE) img).getBufferedImage()));

            try {

                //binarize the input image
                image = BinaryOps.binary(((ImageJ2SE) img).getBufferedImage());

                // crop the white rectange from the image
                File cropFile = crop(image);

                // extract individual characters from text image
                CharacterExtractor ce = new CharacterExtractor();

                //make the output file
                File outputDirectory = new File(charOutputFile);
                //slice the cropped file to individual character with the width and height of 60px
                ce.slice(cropFile, outputDirectory, 60, 60);

                //make a list of character images and add the images form char files
                List<BufferedImage> lista = new ArrayList<BufferedImage>();
                for (int i = 0; i <= 7; i++) {
                    File f = new File("data/char_" + i + ".png");
                    BufferedImage bi = ImageIO.read(f);
                    lista.add(bi);
                }

                // load neural network from file
                // get ocr plugin from neural network
                selectedNeuralNetwork.addPlugin(new OcrPlugin(new Dimension(10, 10), ColorMode.BLACK_AND_WHITE));
                OcrPlugin ocrPlugin = (OcrPlugin) selectedNeuralNetwork.getPlugin(OcrPlugin.class);

                // and recognize current character - ( have to use ImageJ2SE here to wrap BufferedImage)
                for (int i = 0; i < lista.size(); i++) {
                    if (ocrPlugin.recognizeCharacter(new ImageJ2SE(lista.get(i))) != null) {
                        recognizedCharacters += ocrPlugin.recognizeCharacter(new ImageJ2SE(lista.get(i))) + " ";
                    }
                    System.out.print(ocrPlugin.recognizeCharacter(new ImageJ2SE(lista.get(i))) + " ");
                }
                recognizedCharacters.trim();

                JOptionPane.showMessageDialog(this, recognizedCharacters);
                //testResultsTextArea.setText(outputString);                
                IOProvider.getDefault().getIO("Image Recognition Results", false).getOut().println(recognizedCharacters);

                TopComponent tc2 = WindowManager.getDefault().findTopComponent("GeneratedCodeTopComponent");
                tc2.open();
                ((GeneratedCodeTopComponent) tc2).writeCode(selectedNeuralNetwork);

            } catch (Exception ex) {
                IOProvider.getDefault().getIO("Image Recognition Results", false).getOut().println(ex.getStackTrace());
            }
        }
    }

//    public void clearTestArea() {
//        testResultsTextArea.setText("");
//    }
    private String arrayToString(double[] a) {
        StringBuilder result = new StringBuilder();
        if (a.length > 0) {
            result.append(a[0]);
            for (int i = 1; i < a.length; i++) {
                result.append(a[i] + " ");
            }
        }
        return result.toString();
    }

    public File crop(BufferedImage image) {
        // this will be coordinates of the upper left white pixel
        int upperLeftCornerx = Integer.MAX_VALUE;
        int upperLeftCornery = Integer.MAX_VALUE;
        //this will be coordinates of the lower right white pixel
        int lowerRightCornerx = Integer.MIN_VALUE;
        int lowerRightCornery = Integer.MIN_VALUE;
        //find the minimum and maximum white pixel coordinates
        for (int i = 0; i < image.getWidth(); i++) {
            for (int j = 0; j < image.getHeight(); j++) {
                if (image.getRGB(i, j) == WHITE.getRGB() && (i < upperLeftCornerx && j < upperLeftCornery)
                        || (i <= upperLeftCornerx && j < upperLeftCornery)
                        || (i < upperLeftCornerx && j <= upperLeftCornery)) {
                    upperLeftCornerx = i;
                    upperLeftCornery = j;
                }
                if (image.getRGB(i, j) == WHITE.getRGB() && ((i > lowerRightCornerx && j >= lowerRightCornery)
                        || (i >= lowerRightCornerx && j > lowerRightCornery)
                        || (i > lowerRightCornerx && j >= lowerRightCornery))) {
                    lowerRightCornerx = i;
                    lowerRightCornery = j;
                }
            }
        }
        //crop the image to the white rectangle size
        BufferedImage croppedImage = image.getSubimage(upperLeftCornerx, upperLeftCornery, lowerRightCornerx - upperLeftCornerx, lowerRightCornery - upperLeftCornery);
        //make a file from that cropped image
        File cropFile = new File("croppedimage.png");
        try {
            ImageIO.write(croppedImage, "png", cropFile);

        } catch (IOException ex) {
            Logger.getLogger(LprTopComponent.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return cropFile;
    }
}
